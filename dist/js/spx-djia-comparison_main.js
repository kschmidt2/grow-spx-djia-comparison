let subhead=document.getElementsByClassName("chart-subhead"),headline=document.getElementById("chart-head");if(!headline)for(var i=0;i<subhead.length;i++)subhead[i].style.fontWeight="600";Highcharts.setOptions({lang:{thousandsSep:","}});let chartId=document.getElementById("chart-container");function drawHighcharts(){Highcharts.chart(chartId,{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100},title:{text:null},data:{googleSpreadsheetKey:"1AsA5D88argKAzCRuO0zJTQRTiIEP3oilEakoiK173zk",googleSpreadsheetWorksheet:3},plotOptions:{series:{groupPadding:.1}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,itemMarginTop:-10},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},max:30},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueDecimals:2,valueSuffix:"%",shared:!0},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18,itemMarginTop:0},tooltip:{enabled:!1}}}]}})}setTimeout(function(){if(""===chartId.innerHTML){let t=document.getElementsByClassName("chart-area");for(var e=0;e<t.length;e++)t[e].style.display="none";document.getElementById("chart-fallback").innerHTML+='<img src="https://fm-static.cnbc.com/awsmedia/chart/2019/10/08/chart-error_wide.1570569331252.png" style="width: 100%;max-width:660px">'}},500),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsic3ViaGVhZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImhlYWRsaW5lIiwiZ2V0RWxlbWVudEJ5SWQiLCJpIiwibGVuZ3RoIiwic3R5bGUiLCJmb250V2VpZ2h0IiwiSGlnaGNoYXJ0cyIsInNldE9wdGlvbnMiLCJsYW5nIiwidGhvdXNhbmRzU2VwIiwiY2hhcnRJZCIsImRyYXdIaWdoY2hhcnRzIiwiY2hhcnQiLCJ0eXBlIiwic3R5bGVkTW9kZSIsInNwYWNpbmdCb3R0b20iLCJzcGFjaW5nUmlnaHQiLCJ0aXRsZSIsInRleHQiLCJkYXRhIiwiZ29vZ2xlU3ByZWFkc2hlZXRLZXkiLCJnb29nbGVTcHJlYWRzaGVldFdvcmtzaGVldCIsInBsb3RPcHRpb25zIiwic2VyaWVzIiwiZ3JvdXBQYWRkaW5nIiwibGVnZW5kIiwiYWxpZ24iLCJzeW1ib2xSYWRpdXMiLCJ2ZXJ0aWNhbEFsaWduIiwieCIsIml0ZW1NYXJnaW5Ub3AiLCJ4QXhpcyIsImxhYmVscyIsIndoaXRlU3BhY2UiLCJ0aWNrTGVuZ3RoIiwieUF4aXMiLCJ1c2VIVE1MIiwib3ZlcmZsb3ciLCJtYXgiLCJjcmVkaXRzIiwiZW5hYmxlZCIsInRvb2x0aXAiLCJzaGFkb3ciLCJwYWRkaW5nIiwidmFsdWVEZWNpbWFscyIsInZhbHVlU3VmZml4Iiwic2hhcmVkIiwicmVzcG9uc2l2ZSIsInJ1bGVzIiwiY29uZGl0aW9uIiwibWF4V2lkdGgiLCJjaGFydE9wdGlvbnMiLCJzZXRUaW1lb3V0IiwiaW5uZXJIVE1MIiwiY2hhcnRBcmVhIiwiZGlzcGxheSIsInJlYWR5U3RhdGUiLCJhZGRFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFRQSxJQUFBQSxRQUFBQyxTQUFBQyx1QkFBQSxpQkFDQUMsU0FBQUYsU0FBQUcsZUFBQSxjQUNBLElBQUFELFNBQ0EsSUFBQSxJQUFBRSxFQUFBLEVBQUFBLEVBQUFMLFFBQUFNLE9BQUFELElBQ0FMLFFBQUFLLEdBQUFFLE1BQUFDLFdBQUEsTUFJQUMsV0FBQUMsV0FBQSxDQUNBQyxLQUFBLENBQ0FDLGFBQUEsT0FJQSxJQUFBQyxRQUFBWixTQUFBRyxlQUFBLG1CQWlCQSxTQUFBVSxpQkFDQUwsV0FBQU0sTUFBQUYsUUFBQSxDQUNBRSxNQUFBLENBQ0FDLEtBQUEsU0FDQUMsWUFBQSxFQUNBQyxjQUFBLEdBQ0FDLGFBQUEsS0FFQUMsTUFBQSxDQUNBQyxLQUFBLE1BRUFDLEtBQUEsQ0FDQUMscUJBQUEsK0NBQ0FDLDJCQUFBLEdBR0FDLFlBQUEsQ0FDQUMsT0FBQSxDQUNBQyxhQUFBLEtBb0JBQyxPQUFBLENBQ0FDLE1BQUEsUUFDQUMsYUFBQSxFQUNBQyxjQUFBLE1BQ0FDLEVBQUEsR0FDQUMsZUFBQSxJQUVBQyxNQUFBLENBQ0FDLE9BQUEsQ0FDQTVCLE1BQUEsQ0FDQTZCLFdBQUEsV0FHQUMsV0FBQSxHQUVBQyxNQUFBLENBQ0FsQixPQUFBLEVBQ0FlLE9BQUEsQ0FDQUksU0FBQSxFQUNBQyxTQUFBLFNBRUFDLElBQUEsSUFFQUMsUUFBQSxDQUNBQyxTQUFBLEdBRUFDLFFBQUEsQ0FDQUMsUUFBQSxFQUNBQyxRQUFBLEdBQ0FDLGNBQUEsRUFDQUMsWUFBQSxJQUNBQyxRQUFBLEdBRUFDLFdBQUEsQ0FDQUMsTUFBQSxDQUFBLENBQ0FDLFVBQUEsQ0FDQUMsU0FBQSxLQUVBQyxhQUFBLENBQ0F2QyxNQUFBLENBQ0FJLGFBQUEsSUFFQVMsT0FBQSxDQUNBQyxNQUFBLE9BQ0FHLEdBQUEsR0FDQUMsY0FBQSxHQUVBVyxRQUFBLENBQ0FELFNBQUEsU0FwR0FZLFdBQUEsV0FDQSxHQUFBLEtBQUExQyxRQUFBMkMsVUFBQSxDQUVBLElBQUFDLEVBQUF4RCxTQUFBQyx1QkFBQSxjQUNBLElBQUEsSUFBQUcsRUFBQSxFQUFBQSxFQUFBb0QsRUFBQW5ELE9BQUFELElBQ0FvRCxFQUFBcEQsR0FBQUUsTUFBQW1ELFFBQUEsT0FHQXpELFNBQUFHLGVBQUEsa0JBQUFvRCxXQUFBLDRJQUlBLEtBZ0dBLGFBQUF2RCxTQUFBMEQsWUFBQSxnQkFBQTFELFNBQUEwRCxXQUNBN0MsaUJBRUFiLFNBQUEyRCxpQkFBQSxtQkFBQTlDIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhZGRzIHNvY2lhbCBjbGFzcyB0byBnZXQgc29jaWFsIGNoYXJ0XG4vLyBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjaGFydC1hcmVhXCIpO1xuLy8gZm9yKHZhciBpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyBpKyspXG4vLyB7XG4vLyAgICAgZWxlbWVudFtpXS5jbGFzc05hbWUgKz0gXCIgc29jaWFsXCI7XG4vLyB9XG5cbi8vIGJvbGRzIHRoZSBzdWJoZWFkIGlmIHRoZXJlIGlzIG5vIGhlYWRsaW5lXG5sZXQgc3ViaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjaGFydC1zdWJoZWFkXCIpLFxuICAgIGhlYWRsaW5lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGFydC1oZWFkXCIpO1xuICAgIGlmICghaGVhZGxpbmUpIHtcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHN1YmhlYWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN1YmhlYWRbaV0uc3R5bGUuZm9udFdlaWdodCA9IFwiNjAwXCI7XG4gICAgICAgIH0gICAgICAgXG4gICAgIH1cblxuSGlnaGNoYXJ0cy5zZXRPcHRpb25zKHtcbiAgICBsYW5nOiB7XG4gICAgICB0aG91c2FuZHNTZXA6ICcsJ1xuICAgIH1cbn0pO1xuXG5sZXQgY2hhcnRJZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2hhcnQtY29udGFpbmVyXCIpO1xuXG4vLyBjaGVja3MgZm9yIHRoZSBjaGFydCBJRCBhbmQgZGlzcGxheXMgYSBiYWNrdXAgaW1hZ2UgaWYgdGhlIGJyb3dzZXIgY2FuJ3QgZmluZCBpdFxuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBpZihjaGFydElkLmlubmVySFRNTCA9PT0gXCJcIikge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnbm9JZCcpO1xuICAgICAgICBsZXQgY2hhcnRBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNoYXJ0LWFyZWFcIik7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjaGFydEFyZWEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNoYXJ0QXJlYVtpXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIH0gXG4gICAgICAgIC8vIGluc2VydCBjaGFydCBzY3JlZW5zaG90IGhlcmVcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGFydC1mYWxsYmFja1wiKS5pbm5lckhUTUwgKz0gJzxpbWcgc3JjPVwiaHR0cHM6Ly9mbS1zdGF0aWMuY25iYy5jb20vYXdzbWVkaWEvY2hhcnQvMjAxOS8xMC8wOC9jaGFydC1lcnJvcl93aWRlLjE1NzA1NjkzMzEyNTIucG5nXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTttYXgtd2lkdGg6NjYwcHhcIj4nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd5ZXNJZCcpXG4gICAgfVxufSw1MDApO1xuXG5mdW5jdGlvbiBkcmF3SGlnaGNoYXJ0cygpIHtcbiAgICBIaWdoY2hhcnRzLmNoYXJ0KGNoYXJ0SWQsIHtcbiAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdjb2x1bW4nLFxuICAgICAgICAgICAgc3R5bGVkTW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIHNwYWNpbmdCb3R0b206IDI1LFxuICAgICAgICAgICAgc3BhY2luZ1JpZ2h0OiAxMDBcbiAgICAgICAgfSwgXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdvb2dsZVNwcmVhZHNoZWV0S2V5OiAnMUFzQTVEODhhcmdLQXpDUnVPMHpKVFFSVGlJRVAzb2lsRWFrb2lLMTczemsnLFxuICAgICAgICAgICAgZ29vZ2xlU3ByZWFkc2hlZXRXb3Jrc2hlZXQ6IDNcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZm9yIGJhciBjaGFydHMgb25seVxuICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICAgICAgZ3JvdXBQYWRkaW5nOiAwLjFcbiAgICAgICAgICAgIH0gXG4gICAgICAgIH0sXG4gICAgICAgIC8vIGZvciBsaW5lIGNoYXJ0cyBvbmx5XG4gICAgICAgIC8vIHBsb3RPcHRpb25zOiB7XG4gICAgICAgIC8vICAgICBzZXJpZXM6IHtcbiAgICAgICAgLy8gICAgICAgICBsaW5lV2lkdGg6IDEsXG4gICAgICAgIC8vICAgICAgICAgLy8gY2xpcDogZmFsc2UsXG4gICAgICAgIC8vICAgICAgICAgbWFya2VyOiB7XG4gICAgICAgIC8vICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAvLyAgICAgICAgICAgICBzeW1ib2w6ICdjaXJjbGUnLFxuICAgICAgICAvLyAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZmZmZmZmJyxcbiAgICAgICAgLy8gICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmZmZmZmYnXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgYWxpZ246ICdyaWdodCcsXG4gICAgICAgICAgICBzeW1ib2xSYWRpdXM6IDAsXG4gICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcbiAgICAgICAgICAgIHg6IDEwLFxuICAgICAgICAgICAgaXRlbU1hcmdpblRvcDogLTEwXG4gICAgICAgIH0sXG4gICAgICAgIHhBeGlzOiB7XG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aWNrTGVuZ3RoOiA1XG4gICAgICAgIH0sXG4gICAgICAgIHlBeGlzOiB7XG4gICAgICAgICAgICB0aXRsZTogZmFsc2UsXG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICB1c2VIVE1MOiB0cnVlLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnYWxsb3cnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF4OiAzMFxuICAgICAgICB9LFxuICAgICAgICBjcmVkaXRzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICBzaGFkb3c6IGZhbHNlLFxuICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICB2YWx1ZURlY2ltYWxzOiAyLFxuICAgICAgICAgICAgdmFsdWVTdWZmaXg6ICclJyxcbiAgICAgICAgICAgIHNoYXJlZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zaXZlOiB7XG4gICAgICAgICAgICBydWxlczogW3tcbiAgICAgICAgICAgIGNvbmRpdGlvbjoge1xuICAgICAgICAgICAgICAgIG1heFdpZHRoOiA1MDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICB4OiAtMTgsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1NYXJnaW5Ub3A6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2ludGVyYWN0aXZlJykge1xuICAgIGRyYXdIaWdoY2hhcnRzKCk7XG59IGVsc2Uge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGRyYXdIaWdoY2hhcnRzKTtcbn0iXX0=
